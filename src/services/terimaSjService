const pool = require('../config/database');

/**
 * Mengambil daftar cabang yang bisa diakses user.
 * Logika dari Delphi: KDC bisa lihat semua, cabang lain hanya lihat miliknya.
 */
const getCabangList = async (user) => {
    let query = '';
    const params = [];

    if (user.cabang === 'KDC') {
        query = 'SELECT gdg_kode AS kode, gdg_nama AS nama FROM tgudang WHERE gdg_dc IN (0, 3) ORDER BY gdg_kode';
    } else {
        query = 'SELECT gdg_kode AS kode, gdg_nama AS nama FROM tgudang WHERE gdg_kode = ? ORDER BY gdg_kode';
        params.push(user.cabang);
    }
    const [rows] = await pool.query(query, params);
    return rows;
};

/**
 * Mengambil daftar master Surat Jalan (SJ) untuk diterima.
 */
const getList = async (filters) => {
    const { startDate, endDate, cabang, kodeBarang } = filters;
    let params = [cabang, startDate, endDate];
    let itemFilter = '';

    if (kodeBarang) {
        itemFilter = 'AND d.sjd_kode = ?';
        params.push(kodeBarang);
    }

    const query = `
        SELECT DISTINCT
            h.sj_nomor AS Nomor,
            h.sj_tanggal AS Tanggal,
            h.sj_mt_nomor AS NomorMinta,
            h.sj_noterima AS NomorTerima,
            t.tj_tanggal AS TglTerima,
            h.sj_kecab AS Store,
            g.gdg_nama AS Nama_Store,
            h.sj_ket AS Keterangan,
            IFNULL(t.tj_closing, "N") AS Closing
        FROM tdc_sj_hdr h
        INNER JOIN tdc_sj_dtl d ON d.sjd_nomor = h.sj_nomor
        LEFT JOIN ttrm_sj_hdr t ON t.tj_nomor = h.sj_noterima
        LEFT JOIN tgudang g ON g.gdg_kode = h.sj_kecab
        WHERE h.sj_peminta = ""
          AND h.sj_kecab = ?
          AND h.sj_tanggal BETWEEN ? AND ?
          ${itemFilter}
        ORDER BY h.sj_noterima, h.sj_nomor;
    `;
    const [rows] = await pool.query(query, params);
    return rows;
};

/**
 * Mengambil detail item dari sebuah Surat Jalan (SJ).
 */
const getDetails = async (nomor) => {
    const query = `
        SELECT 
            d.sjd_kode AS Kode,
            TRIM(CONCAT(a.brg_jeniskaos, " ", a.brg_tipe)) AS Nama,
            d.sjd_ukuran AS Ukuran,
            d.sjd_jumlah AS Jumlah
        FROM tdc_sj_dtl d
        INNER JOIN tdc_sj_hdr h ON d.sjd_nomor = h.sj_nomor
        LEFT JOIN tbarangdc a ON a.brg_kode = d.sjd_kode
        WHERE d.sjd_nomor = ?
        ORDER BY d.sjd_kode, d.sjd_ukuran;
    `;
    const [rows] = await pool.query(query, [nomor]);
    return rows;
};

/**
 * Menghapus/Membatalkan penerimaan SJ.
 */
const remove = async (nomorSj, nomorTerima, user) => {
    const connection = await pool.getConnection();
    try {
        await connection.beginTransaction();

        // Validasi dari Delphi
        const [sjRows] = await connection.query('SELECT tj_closing, tj_cab FROM ttrm_sj_hdr WHERE tj_nomor = ?', [nomorTerima]);
        if (sjRows.length === 0) throw new Error('Nomor penerimaan tidak ditemukan.');
        const sj = sjRows[0];

        if (sj.tj_closing === 'Y') throw new Error('Penerimaan sudah di-closing. Tidak bisa dibatalkan.');
        if (sj.tj_cab !== user.cabang) throw new Error('Anda tidak berhak membatalkan penerimaan milik cabang lain.');

        // Proses pembatalan
        await connection.query('DELETE FROM ttrm_sj_hdr WHERE tj_nomor = ?', [nomorTerima]);
        await connection.query('UPDATE tdc_sj_hdr SET sj_noterima = NULL WHERE sj_nomor = ?', [nomorSj]);

        // (Logika sinkronisasi bisa ditambahkan di sini jika perlu)
        
        await connection.commit();
        return { message: `Penerimaan untuk SJ ${nomorSj} berhasil dibatalkan.` };
    } catch (error) {
        await connection.rollback();
        throw error;
    } finally {
        connection.release();
    }
};

module.exports = {
    getCabangList,
    getList,
    getDetails,
    remove,
};
